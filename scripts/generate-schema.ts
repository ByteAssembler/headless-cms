import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url'; // Import necessary function
import { allContentTypeConfigs } from '../src/content-types'; // Adjust path as needed
import { generateDrizzleSchemaComponents, type AllTables, type AllGeneratedRelations } from '../src/db/generation-logic'; // Adjust path as needed

// --- Configuration ---
// Get current directory in ES module scope
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const outputFilePath = path.resolve(__dirname, '../src/db/schema.ts');

// --- Generation Logic ---
console.log("Starting schema generation...");

// 1. Generate the schema components in memory to get the names
// We don't use the actual objects here, just their keys for code generation.
const { allTables, allGeneratedRelations } = generateDrizzleSchemaComponents(allContentTypeConfigs);
const tableNames = Object.keys(allTables);
const relationNames = Object.keys(allGeneratedRelations);

console.log(`Found ${tableNames.length} tables:`, tableNames.join(', '));
console.log(`Found ${relationNames.length} relations:`, relationNames.join(', '));

// 2. Build the output file content as a string
let outputContent = `// THIS FILE IS AUTO-GENERATED BY scripts/generate-schema.ts
// DO NOT EDIT THIS FILE DIRECTLY!

import { allContentTypeConfigs } from '../content-types';
import { generateDrizzleSchemaComponents, type AllTables, type AllGeneratedRelations } from './generation-logic';
import type { AnySQLiteTable } from 'drizzle-orm/sqlite-core';
import type { Relations } from 'drizzle-orm';

console.log("[Schema] Initializing generated schema...");

// Regenerate components within the scope of the final schema file
const { allTables, allGeneratedRelations } = generateDrizzleSchemaComponents(allContentTypeConfigs);

console.log("[Schema] Exporting tables and relations...");

// --- Auto-generated Exports (Tables and Relations) ---
`;

// Add explicit exports for tables
for (const tableName of tableNames) {
	// Add type assertion for better type safety, especially for join tables
	const typeAssertion = tableName.includes('_to_') ? 'AnySQLiteTable' : 'TableWithId'; // Simple heuristic
	// Note: A more robust solution might involve checking the actual table structure
	// or adding a specific marker during generation.
	// For now, we assume non-join tables have an ID.
	// We need to import TableWithId if used.
	if (typeAssertion === 'TableWithId' && !outputContent.includes('TableWithId')) {
		// Add import if needed - this is a bit simplistic
		outputContent = outputContent.replace(
			'import type { Relations } from \'drizzle-orm\';',
			'import type { Relations } from \'drizzle-orm\';\nimport type { AnySQLiteColumn } from \'drizzle-orm/sqlite-core\';\ntype TableWithId = AnySQLiteTable & { id: AnySQLiteColumn };'
		);
	}
	outputContent += `export const ${tableName} = allTables['${tableName}']${typeAssertion !== 'AnySQLiteTable' ? ` as ${typeAssertion}` : ''};
`;
}

outputContent += '\n';

// Add explicit exports for relations
for (const relationName of relationNames) {
	outputContent += `export const ${relationName} = allGeneratedRelations['${relationName}'];
`;
}

outputContent += `
console.log("[Schema] Defining final schema object...");

// --- Auto-generated Schema Object ---
export const schema = {
`;

// Add tables to schema object
for (const tableName of tableNames) {
	outputContent += `    ${tableName},
`;
}

// Add relations to schema object
for (const relationName of relationNames) {
	outputContent += `    ${relationName},
`;
}

outputContent += `};

console.log("[Schema] Generation complete.");

// --- Type Helpers ---
export type Schema = typeof schema;
// Use the keys obtained during generation for accurate TableName/RelationName types
export type TableName = keyof Pick<typeof allTables, ${tableNames.map(name => `'${name}'`).join(' | ')}>;
export type RelationName = keyof Pick<typeof allGeneratedRelations, ${relationNames.map(name => `'${name}'`).join(' | ')}>;
`;

// 3. Write the generated content to the output file
try {
	fs.writeFileSync(outputFilePath, outputContent, 'utf8');
	console.log(`Successfully generated schema at: ${outputFilePath}`);
} catch (error) {
	console.error(`Error writing schema file to ${outputFilePath}:`, error);
	process.exit(1); // Exit with error code
}
