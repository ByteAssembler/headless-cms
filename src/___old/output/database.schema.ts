// THIS FILE IS AUTO-GENERATED BY scripts/generate-schema.ts
// DO NOT EDIT THIS FILE DIRECTLY!

import { sqliteTable, text, integer, real, blob, primaryKey } from 'drizzle-orm/sqlite-core';
import { relations } from 'drizzle-orm';
import type { AnySQLiteColumn, AnySQLiteTable } from 'drizzle-orm/sqlite-core';

// Import the necessary configs and definitions for type safety
import {
  allContentTypeConfigs, // Keep for potential dynamic checks if needed
  // Import specific configs used in table definitions
  usersConfig,
  postsConfig,
  categoriesConfig,
  sessionConfig,
  accountConfig,
  verificationConfig,
} from '@/old/content-types';
import { defineIdField, defineTimestamps } from '@/old/core/content-fields';

console.log("[Schema] Generated schema definitions loading...");

// --- Generated Table Definitions ---
export const users = sqliteTable('users', {
  id: defineIdField().column,
  name: usersConfig.fields.name.column,
  email: usersConfig.fields.email.column,
  emailVerified: usersConfig.fields.emailVerified.column,
  image: usersConfig.fields.image.column,
  role: usersConfig.fields.role.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const posts = sqliteTable('posts', {
  id: defineIdField().column,
  title: postsConfig.fields.title.column,
  slug: postsConfig.fields.slug.column,
  content: postsConfig.fields.content.column,
  publishedAt: postsConfig.fields.publishedAt.column,
  authorId: postsConfig.fields.author.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const categories = sqliteTable('categories', {
  id: defineIdField().column,
  name: categoriesConfig.fields.name.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const session = sqliteTable('session', {
  id: defineIdField().column,
  expiresAt: sessionConfig.fields.expiresAt.column,
  token: sessionConfig.fields.token.column,
  ipAddress: sessionConfig.fields.ipAddress.column,
  userAgent: sessionConfig.fields.userAgent.column,
  userId: sessionConfig.fields.user.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const account = sqliteTable('account', {
  id: defineIdField().column,
  accountId: accountConfig.fields.accountId.column,
  providerId: accountConfig.fields.providerId.column,
  userId: accountConfig.fields.user.column,
  accessToken: accountConfig.fields.accessToken.column,
  refreshToken: accountConfig.fields.refreshToken.column,
  idToken: accountConfig.fields.idToken.column,
  accessTokenExpiresAt: accountConfig.fields.accessTokenExpiresAt.column,
  refreshTokenExpiresAt: accountConfig.fields.refreshTokenExpiresAt.column,
  scope: accountConfig.fields.scope.column,
  password: accountConfig.fields.password.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const verification = sqliteTable('verification', {
  id: defineIdField().column,
  identifier: verificationConfig.fields.identifier.column,
  value: verificationConfig.fields.value.column,
  expiresAt: verificationConfig.fields.expiresAt.column,
  createdAt: defineTimestamps().createdAt.column,
  updatedAt: defineTimestamps().updatedAt.column,
});

export const categories_to_posts = sqliteTable('categories_to_posts', {
  categoriesId: text('categoriesId').notNull().references(() => categories.id, { onDelete: 'cascade', onUpdate: 'cascade' }),
  postsId: text('postsId').notNull().references(() => posts.id, { onDelete: 'cascade', onUpdate: 'cascade' }),
}, (table) => ({
  pk: primaryKey({ columns: [table.categoriesId, table.postsId] })
}));

// --- Generated Relation Definitions ---
export const usersRelations = relations(users, ({ one, many }) => ({
  posts: many(posts),
  session: many(session),
  account: many(account)
}));

export const postsRelations = relations(posts, ({ one, many }) => ({
  author: one(users, {
    fields: [posts.authorId],
    references: [users.id]
  }),
  categories: many(categories_to_posts)
}));

export const sessionRelations = relations(session, ({ one, many }) => ({
  user: one(users, {
    fields: [session.userId],
    references: [users.id]
  })
}));

export const accountRelations = relations(account, ({ one, many }) => ({
  user: one(users, {
    fields: [account.userId],
    references: [users.id]
  })
}));

export const categories_to_postsRelations = relations(categories_to_posts, ({ one }) => ({
  categories: one(categories, {
    fields: [categories_to_posts.categoriesId],
    references: [categories.id]
  }),
  posts: one(posts, {
    fields: [categories_to_posts.postsId],
    references: [posts.id]
  })
}));

console.log("[Schema] Defining final schema object...");

// --- Generated Schema Object ---
export const schema = {
  users,
  posts,
  categories,
  session,
  account,
  verification,
  categories_to_posts,
  usersRelations,
  postsRelations,
  sessionRelations,
  accountRelations,
  categories_to_postsRelations,
};

console.log("[Schema] Generation complete.");

// --- Type Helpers ---
export type Schema = typeof schema;
export type TableName = 'users' | 'posts' | 'categories' | 'session' | 'account' | 'verification' | 'categories_to_posts';
export type RelationName = 'usersRelations' | 'postsRelations' | 'sessionRelations' | 'accountRelations' | 'categories_to_postsRelations';

// Helper type for tables with a standard 'id' column
export type TableWithId = Extract<Schema[TableName], AnySQLiteTable & { id: AnySQLiteColumn }>;
